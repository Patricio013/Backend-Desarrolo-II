name: CI - Backend JUnit + k6

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} clean test

    k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    env:
      API_BASE: http://localhost:8080
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Wait for Postgres
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "✅ Postgres UP"
              break
            fi
            sleep 2
          done

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} spring-boot:run > backend.log 2>&1 &
          for i in {1..60}; do
            if curl -sf $API_BASE/actuator/health > /dev/null; then 
              echo "✅ Backend UP"
              break
            fi
            sleep 2
          done
          curl -s $API_BASE/actuator/health || (echo "❌ Backend no inició"; cat backend.log; exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6
          # (aquí va tu generación de smoke/stress/soak/spike.js como ya lo tenías)

      - name: Prepare output dir for k6
        run: |
          mkdir -p out/k6
          chmod 777 out/k6

      - name: Run k6 (Docker) + export summaries
        run: |
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_smoke.js  --summary-export=/out/smoke.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_stress.js --summary-export=/out/stress.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_soak.js   --summary-export=/out/soak.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_spike.js  --summary-export=/out/spike.json

      - name: Subir artefactos k6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-summaries
          path: out/k6/*.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## 📈 k6 Summary" >> $GITHUB_STEP_SUMMARY
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count' "$f")
            p95=$(jq '.metrics.http_req_duration["p(95)"]' "$f")
            fail=$(jq '.metrics.http_req_failed.rate' "$f")
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### $tag" >> $GITHUB_STEP_SUMMARY
            echo "| Requests | p95 (ms) | fail rate |" >> $GITHUB_STEP_SUMMARY
            echo "|---------:|---------:|----------:|" >> $GITHUB_STEP_SUMMARY
            printf "| %s | %.2f | %.4f |\n" "$reqs" "$p95" "$fail" >> $GITHUB_STEP_SUMMARY
          done
