name: CI - Backend JUnit + k6

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B clean test

      - name: Resumen JUnit
        if: always()
        run: |
          echo "## ✅ JUnit Summary" >> $GITHUB_STEP_SUMMARY

          mapfile -t REPORTS < <(find . -type f \( -path "*/target/surefire-reports/*.xml" -o -path "*/target/failsafe-reports/*.xml" \))
          if [ ${#REPORTS[@]} -eq 0 ]; then
            echo "_No se encontraron reportes JUnit._" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi

          totals=$(awk -F'"' '
            /<testsuite / {
              for (i=1;i<=NF;i++) {
                if ($i ~ /tests=/)    T += $(i+1)
                if ($i ~ /failures=/) F += $(i+1)
                if ($i ~ /errors=/)   E += $(i+1)
                if ($i ~ /skipped=/)  S += $(i+1)
              }
            }
            END { printf "%d %d %d %d\n", T, F, E, S }
          ' "${REPORTS[@]}")

          T=$(echo "$totals" | awk '{print $1}')
          F=$(echo "$totals" | awk '{print $2}')
          E=$(echo "$totals" | awk '{print $3}')
          S=$(echo "$totals" | awk '{print $4}')

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Total | Failures | Errors | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------:|---------:|-------:|--------:|" >> $GITHUB_STEP_SUMMARY
          echo "| $T | $F | $E | $S |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📂 Archivos analizados: ${#REPORTS[@]}" >> $GITHUB_STEP_SUMMARY
          for f in "${REPORTS[@]}"; do
            echo "- $(basename "$f")" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          mapfile -t CLASSES < <(awk -F'"' '/<testsuite /{ for(i=1;i<=NF;i++){ if($i ~ /name=/){ print $(i+1) } } }' "${REPORTS[@]}" | sort -u)
          echo "🧪 Clases de test: ${#CLASSES[@]}" >> $GITHUB_STEP_SUMMARY
          for c in "${CLASSES[@]}"; do
            echo "- $c" >> $GITHUB_STEP_SUMMARY
          done

  k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      API_BASE: http://localhost:8080

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests spring-boot:run > backend.log 2>&1 &
          for i in {1..120}; do
            if curl -sf http://localhost:8080/actuator/health > /dev/null; then 
              echo "✅ Backend UP"
              break
            fi
            sleep 2
          done
          curl -s http://localhost:8080/actuator/health || (echo "❌ Backend no inició" && exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6 out/k6
          chmod 777 out/k6

          # Generar scripts para solicitudes y pagos
          for endpoint in solicitudes pagos; do
            for type in smoke stress soak spike; do
              cat > tests/k6/${endpoint}_${type}.js <<'JS'
              import http from 'k6/http';
              import { check, sleep } from 'k6';
              export const options = { vus: 1, duration: '10s' };
              const BASE = __ENV.API_BASE;

              export default function () {
                let res;
                if ("__ENDPOINT__" === "solicitudes") {
                  res = http.post(`${BASE}/api/solicitudes/invitar-top3`);
                  check(res, { "invitar-top3 ok": r => r.status === 200 });
                } else {
                  res = http.get(`${BASE}/api/pagos/ultimas`);
                  check(res, { "pagos ultimas ok": r => r.status === 200 });
                }
                sleep(1);
              }
              JS
              sed -i "s|__ENDPOINT__|$endpoint|g" tests/k6/${endpoint}_${type}.js
            done
          done

      - name: Run k6 (Docker)
        run: |
          mkdir -p out/k6
          chmod 777 out/k6
          ls -l tests/k6
          for script in tests/k6/*.js; do
            tag=$(basename $script .js)
            echo "▶️ Ejecutando $tag"
            docker run --rm --network host -e API_BASE=${API_BASE} \
              -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 \
              run /scripts/$tag.js --summary-export=/out/$tag.json || \
              echo '{"metrics":{}}' > out/k6/$tag.json
          done

      - name: Subir artefactos k6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-summaries
          path: out/k6/*.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## 📈 k6 Summary" >> $GITHUB_STEP_SUMMARY
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count // 0' "$f")
            p95=$(jq '.metrics.http_req_duration["p(95)"] // 0' "$f")
            fail=$(jq '.metrics.http_req_failed.rate // 0' "$f")
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### $tag" >> $GITHUB_STEP_SUMMARY
            echo "| Requests | p95 (ms) | Fail rate |" >> $GITHUB_STEP_SUMMARY
            echo "|---------:|---------:|----------:|" >> $GITHUB_STEP_SUMMARY
            printf "| %s | %.2f | %.4f |\n" "$reqs" "$p95" "$fail" >> $GITHUB_STEP_SUMMARY
          done
