name: CI - Backend JUnit + Cypress + k6

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: arreglaya
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} clean test

      - name: Publicar resultados JUnit
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/*.xml

      - name: Subir artefactos JUnit
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-reports
          path: |
            **/target/surefire-reports/*
            **/target/failsafe-reports/*

      - name: Resumen rápido JUnit
        if: always()
        run: |
          echo "## ✅ JUnit Summary" >> $GITHUB_STEP_SUMMARY
          passed=$(grep -h "<testsuite " **/target/surefire-reports/*.xml | awk -F'"' '{for(i=1;i<=NF;i++){if($i~/tests=/){t=$(i+1)}; if($i~/failures=/){f=$(i+1)}; if($i~/errors=/){e=$(i+1)}; if($i~/skipped=/){s=$(i+1)}}; print t,f,e,s}' | awk '{T+=$1;F+=$2;E+=$3;S+=$4} END {print T,F,E,S}')
          T=$(echo $passed | awk '{print $1}'); F=$(echo $passed | awk '{print $2}'); E=$(echo $passed | awk '{print $3}'); S=$(echo $passed | awk '{print $4}')
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Total | Failures | Errors | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------:|---------:|------:|--------:|" >> $GITHUB_STEP_SUMMARY
          echo "| $T | $F | $E | $S |" >> $GITHUB_STEP_SUMMARY

  e2e-cypress:
    name: Cypress E2E
    runs-on: ubuntu-latest
    needs: backend-tests
    env:
      SPRING_PROFILES_ACTIVE: test
      API_BASE: http://localhost:8080
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} spring-boot:run > backend.log 2>&1 &
          for i in {1..60}; do
            if curl -sf $API_BASE/actuator/health > /dev/null; then echo "Backend UP"; break; fi
            sleep 2
          done
          curl -s $API_BASE/actuator/health || (echo "Backend no inició" && exit 1)

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Install deps (frontend)
        working-directory: frontend
        run: npm ci

      - name: Run Cypress (reporter JUnit)
        uses: cypress-io/github-action@v6
        with:
          working-directory: frontend
          command: |
            npx cypress run \
              --reporter junit \
              --reporter-options "mochaFile=results/junit-[hash].xml,toConsole=true"
        env:
          CYPRESS_API_BASE: ${{ env.API_BASE }}

      - name: Subir artefactos Cypress
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-reports
          path: |
            frontend/results/*.xml
            frontend/cypress/screenshots/**/*
            frontend/cypress/videos/**/*

      - name: Resumen Cypress
        if: always()
        run: |
          echo "## 🌐 Cypress Summary" >> $GITHUB_STEP_SUMMARY
          tests=$(ls frontend/results/*.xml 2>/dev/null | wc -l)
          echo "- Archivos JUnit: $tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Artefactos subidos: cypress-reports_" >> $GITHUB_STEP_SUMMARY

  k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    env:
      API_BASE: http://localhost:8080
      SPRING_PROFILES_ACTIVE: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} spring-boot:run > backend.log 2>&1 &
          for i in {1..60}; do
            if curl -sf $API_BASE/actuator/health > /dev/null; then echo "Backend UP"; break; fi
            sleep 2
          done
          curl -s $API_BASE/actuator/health || (echo "Backend no inició" && exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6 out/k6
          # SMOKE
          cat > tests/k6/invitar_top3_smoke.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = {
            vus: 1,
            duration: '30s',
            thresholds: { http_req_failed: ['rate<0.01'], http_req_duration: ['p(95)<400'] },
          };
          const BASE = __ENV.API_BASE || 'http://localhost:8080';
          const HDR = { 'Content-Type': 'application/json' };
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: HDR });
            check(r, { '200': x => x.status === 200, 'array': x => Array.isArray(x.json()) });
            sleep(1);
          }
          JS
          # STRESS
          cat > tests/k6/invitar_top3_stress.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '30s', target: 20 },
              { duration: '30s', target: 50 },
              { duration: '30s', target: 100 },
              { duration: '30s', target: 150 },
              { duration: '30s', target: 0 },
            ],
            thresholds: { http_req_failed: ['rate<0.02'], http_req_duration: ['p(95)<800'] },
          };
          const BASE = __ENV.API_BASE || 'http://localhost:8080';
          const HDR = { 'Content-Type': 'application/json' };
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: HDR });
            check(r, { '200': x => x.status === 200 });
          }
          JS
          # SOAK
          cat > tests/k6/invitar_top3_soak.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = {
            vus: 10,
            duration: '10m',
            thresholds: { http_req_failed: ['rate<0.01'], http_req_duration: ['p(95)<700'] },
          };
          const BASE = __ENV.API_BASE || 'http://localhost:8080';
          const HDR = { 'Content-Type': 'application/json' };
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: HDR });
            check(r, { '200': x => x.status === 200 });
            sleep(1);
          }
          JS
          # SPIKE
          cat > tests/k6/invitar_top3_spike.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '10s', target: 5 },
              { duration: '5s',  target: 200 },
              { duration: '30s', target: 5 },
              { duration: '10s', target: 0 },
            ],
            thresholds: { http_req_failed: ['rate<0.03'], http_req_duration: ['p(95)<900'] },
          };
          const BASE = __ENV.API_BASE || 'http://localhost:8080';
          const HDR = { 'Content-Type': 'application/json' };
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: HDR });
            check(r, { '200': x => x.status === 200 });
          }
          JS

      - name: Run k6 (Docker) + export summaries
        run: |
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_smoke.js  --summary-export=/out/smoke.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_stress.js --summary-export=/out/stress.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_soak.js   --summary-export=/out/soak.json
          docker run --rm -e API_BASE=${API_BASE} -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 run /scripts/invitar_top3_spike.js  --summary-export=/out/spike.json

      - name: Subir artefactos k6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-summaries
          path: out/k6/*.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## 📈 k6 Summary" >> $GITHUB_STEP_SUMMARY
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count' "$f")
            p95=$(jq '.metrics.http_req_duration["p(95)"]' "$f")
            fail=$(jq '.metrics.http_req_failed.rate' "$f")
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### $tag" >> $GITHUB_STEP_SUMMARY
            echo "| Requests | p95 (ms) | fail rate |" >> $GITHUB_STEP_SUMMARY
            echo "|---------:|---------:|----------:|" >> $GITHUB_STEP_SUMMARY
            printf "| %s | %.2f | %.4f |\n" "$reqs" "$p95" "$fail" >> $GITHUB_STEP_SUMMARY
          done

  all-done:
    name: Resumen general
    runs-on: ubuntu-latest
    needs: [backend-tests, e2e-cypress, k6-load]
    steps:
      - name: Resultado final
        run: |
          echo "## ✅ Pipeline" >> $GITHUB_STEP_SUMMARY
          echo "- JUnit, Cypress y k6 ejecutados." >> $GITHUB_STEP_SUMMARY
          echo "- Revisa los artefactos: \`junit-reports\`, \`cypress-reports\`, \`k6-summaries\`" >> $GITHUB_STEP_SUMMARY
