name: CI - Backend JUnit + k6 + Cypress

on:
  push:
    branches: [ main, master, tests, DevOps ]
  pull_request:

permissions:
  contents: write

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B clean test

      - name: Resumen JUnit
        if: always()
        run: |
          echo "## ✅ JUnit Summary" >> $GITHUB_STEP_SUMMARY
          mapfile -t REPORTS < <(find . -type f \( -path "*/target/surefire-reports/*.xml" -o -path "*/target/failsafe-reports/*.xml" \))
          if [ ${#REPORTS[@]} -eq 0 ]; then
            echo "_No se encontraron reportes JUnit (¿se ejecutaron tests?)._" >> $GITHUB_STEP_SUMMARY
            exit 0
          fi
          totals=$(awk -F'"' '
            /<testsuite / {
              for (i=1;i<=NF;i++) {
                if ($i ~ /tests=/)    T += $(i+1)
                if ($i ~ /failures=/) F += $(i+1)
                if ($i ~ /errors=/)   E += $(i+1)
                if ($i ~ /skipped=/)  S += $(i+1)
              }
            }
            END { printf "%d %d %d %d\n", T, F, E, S }
          ' "${REPORTS[@]}")
          T=$(echo "$totals" | awk '{print $1}')
          F=$(echo "$totals" | awk '{print $2}')
          E=$(echo "$totals" | awk '{print $3}')
          S=$(echo "$totals" | awk '{print $4}')
          echo "| Total | Failures | Errors | Skipped |" >> $GITHUB_STEP_SUMMARY
          echo "|------:|---------:|-------:|--------:|" >> $GITHUB_STEP_SUMMARY
          echo "| $T | $F | $E | $S |" >> $GITHUB_STEP_SUMMARY
          echo "📂 Archivos analizados: ${#REPORTS[@]}" >> $GITHUB_STEP_SUMMARY

      - name: Subir artefactos JUnit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/*.xml

  k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:15
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      API_BASE: http://localhost:8080

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests spring-boot:run > backend.log 2>&1 &
          echo "⏳ Esperando a que levante el backend..."
          for i in {1..120}; do
            if curl -sf http://localhost:8080/actuator/health > /dev/null; then
              echo "✅ Backend UP"
              break
            fi
            sleep 2
          done
          curl -s http://localhost:8080/actuator/health || (echo "❌ Backend no inició" && exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6 out/k6
          chmod 777 out/k6
          
          # SMOKE
          cat > tests/k6/smoke.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 1, duration: '10s' };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
            sleep(1);
          }
          JS
          
          # STRESS
          cat > tests/k6/stress.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '20s', target: 20 },
              { duration: '20s', target: 50 },
              { duration: '20s', target: 100 },
              { duration: '20s', target: 0 },
            ],
          };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
          }
          JS
          
          # SOAK
          cat > tests/k6/soak.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 10, duration: '2m' };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
            sleep(1);
          }
          JS
          
          # SPIKE
          cat > tests/k6/spike.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '5s', target: 5 },
              { duration: '5s', target: 200 },
              { duration: '10s', target: 5 },
              { duration: '5s', target: 0 },
            ],
          };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
          }
          JS


      - name: Run k6 (Docker)
        run: |
          mkdir -p out/k6
          chmod 777 out/k6
          for script in tests/k6/*.js; do
            name=$(basename "$script" .js)
            echo "▶️ Ejecutando $name"
            docker run --rm --network host -e API_BASE=${API_BASE} \
              -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 \
              run /scripts/$name.js --summary-export=/out/$name.json || \
              echo '{"metrics":{}}' > out/k6/$name.json
          done

      - name: Subir artefactos k6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-summaries
          path: out/k6/*.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## 📈 k6 Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Requests | p95 (ms) | Fail rate |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------:|---------:|----------:|" >> $GITHUB_STEP_SUMMARY
          
          totalReqs=0
          totalFail=0
          allP95=()
          
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count // 0' "$f")
            p95=$(jq '.metrics.http_req_duration["p(95)"] // 0' "$f")
            fail=$(jq '.metrics.http_req_failed.rate // 0' "$f")
          
            totalReqs=$((totalReqs + reqs))
            # acumulo fallas estimadas
            failCount=$(echo "$reqs * $fail" | bc -l | awk '{printf "%d", $1}')
            totalFail=$((totalFail + failCount))
            allP95+=($p95)
          
            printf "| %s | %s | %.2f | %.4f |\n" "$tag" "$reqs" "$p95" "$fail" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Totales" >> $GITHUB_STEP_SUMMARY
          globalFailRate=$(echo "$totalFail / $totalReqs" | bc -l)
          avgP95=$(printf "%.2f" $(echo "${allP95[@]}" | awk '{s=0; for(i=1;i<=NF;i++) s+=$i; print s/NF}'))
          printf "| Total Requests | Avg p95 (ms) | Global Fail rate |\n" >> $GITHUB_STEP_SUMMARY
          printf "|---------------:|-------------:|-----------------:|\n" >> $GITHUB_STEP_SUMMARY
          printf "| %s | %s | %.4f |\n" "$totalReqs" "$avgP95" "$globalFailRate" >> $GITHUB_STEP_SUMMARY
          

  e2e-tests:
    name: Cypress E2E
    runs-on: ubuntu-latest
    needs: k6-load
    permissions:
      contents: write
    services:
      postgres:
        image: postgres:15
        ports: [ "5432:5432" ]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      API_BASE: http://localhost:8080

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests spring-boot:run > backend.log 2>&1 &
          echo "⏳ Esperando a que levante el backend..."
          for i in {1..120}; do
            if curl -sf http://localhost:8080/actuator/health > /dev/null; then 
              echo "✅ Backend UP"
              break
            fi
            sleep 2
          done
          curl -s http://localhost:8080/actuator/health || (echo "❌ Backend no inició" && (cat backend.log || true) && exit 1)

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install node-fetch (fix Cypress config)
        run: npm install node-fetch@2

      - name: Run Cypress tests
        run: |
          mkdir -p out/cypress
          npx cypress run \
            --reporter json-stream \
            --reporter-options "output=out/cypress/results.json" \
            > cypress.log || true

      - name: Subir artefactos Cypress
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results
          path: |
            out/cypress/
            cypress.log
            cypress/videos/

      - name: Resumen Cypress
        if: always()
        run: |
          echo "## Cypress E2E Summary" >> $GITHUB_STEP_SUMMARY
          if [ -f "out/cypress/results.json" ]; then
            # Instalar jq si no está presente
            sudo apt-get update > /dev/null && sudo apt-get install -y jq > /dev/null
            
            # Extraer estadísticas del JSON
            total=$(jq -s 'map(select(.[0] == "end")) | .[0][1].stats.tests' out/cypress/results.json)
            passed=$(jq -s 'map(select(.[0] == "end")) | .[0][1].stats.passes' out/cypress/results.json)
            failed=$(jq -s 'map(select(.[0] == "end")) | .[0][1].stats.failures' out/cypress/results.json)
            skipped=$(jq -s 'map(select(.[0] == "end")) | .[0][1].stats.pending' out/cypress/results.json)
            duration=$(jq -s 'map(select(.[0] == "end")) | .[0][1].stats.duration' out/cypress/results.json)

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Total | Passed | Failed | Skipped | Duration (ms) |" >> $GITHUB_STEP_SUMMARY
            echo "|------:|-------:|-------:|--------:|--------------:|" >> $GITHUB_STEP_SUMMARY
            echo "| $total | $passed | $failed | $skipped | $duration |" >> $GITHUB_STEP_SUMMARY

            if [ "$failed" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ❌ Failed tests" >> $GITHUB_STEP_SUMMARY
              jq -s 'map(select(.[0] == "test" and .[1].state == "failed")) | .[] | .[1].title' out/cypress/results.json | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "_⚠️ No Cypress results found._" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Descargar artefactos de JUnit y k6
        if: always()
              uses: actions/download-artifact@v4
              with:
                path: ./artifacts


      - name: Consolidar métricas para gh-pages (tolerante)
        if: always()
        run: |
          mkdir -p metrics

          # --- JUnit ---
          junit_reports_path="artifacts/junit-results"
          if [ -d "$junit_reports_path" ] && [ -n "$(find $junit_reports_path -type f)" ]; then
            totals=$(awk -F'"' '
              /<testsuite / {
                for (i=1;i<=NF;i++) {
                  if ($i ~ /tests=/)    T += $(i+1)
                  if ($i ~ /failures=/) F += $(i+1)
                  if ($i ~ /errors=/)   E += $(i+1)
                  if ($i ~ /skipped=/)  S += $(i+1)
                }
              }
              END { printf "%d %d %d %d\n", T, F, E, S }
            ' $(find $junit_reports_path -type f))
            T=$(echo "$totals" | awk '{print $1}')
            F=$(echo "$totals" | awk '{print $2}')
            E=$(echo "$totals" | awk '{print $3}')
            S=$(echo "$totals" | awk '{print $4}')
            echo "{ \"total\": $T, \"failures\": $F, \"errors\": $E, \"skipped\": $S }" > metrics/junit.json
          else
            echo "{ \"total\": 0, \"failures\": 0, \"errors\": 0, \"skipped\": 0 }" > metrics/junit.json
          fi

          # --- k6 ---
          if [ -d "artifacts/k6-summaries" ] && ls artifacts/k6-summaries/*.json >/dev/null 2>&1; then
            jq -s '{tests: .}' artifacts/k6-summaries/*.json > metrics/k6.json
          else
            echo '{ "tests": [] }' > metrics/k6.json
          fi

          # --- Cypress ---
          if [ -f "artifacts/cypress-results/out/cypress/results.json" ]; then
            jq -s '.' artifacts/cypress-results/out/cypress/results.json > metrics/cypress.json
          else
            echo '{ "results": [] }' > metrics/cypress.json
          fi

          # --- Metadata ---
          echo "{ \"generated_at\": \"$(date -u +%FT%TZ)\", \"commit\": \"${GITHUB_SHA}\", \"branch\": \"${GITHUB_REF_NAME}\" }" > metrics/meta.json

      - name: Deploy métricas a gh-pages (seguro)
        if: always()
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # Crear una carpeta temporal limpia
          mkdir -p .ghpages-temp
          cp -r metrics/* .ghpages-temp/

          # Inicializar un nuevo repo Git solo para gh-pages
          cd .ghpages-temp
          git init
          git checkout -b gh-pages

          git add .
          git commit -m "📊 Update metrics $(date -u +%FT%TZ)"

          # Pushear usando el token de Actions
          git push --force "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" gh-pages