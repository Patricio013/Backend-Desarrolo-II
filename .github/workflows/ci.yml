name: CI - Backend JUnit + k6

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} clean test

  k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_PROFILES_ACTIVE: test
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      API_BASE: http://localhost:8080

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests -Dspring.profiles.active=${{ env.SPRING_PROFILES_ACTIVE }} spring-boot:run > backend.log 2>&1 &
          for i in {1..60}; do
            if curl -sf $API_BASE/actuator/health > /dev/null; then echo "Backend UP"; break; fi
            sleep 2
          done
          curl -s $API_BASE/actuator/health || (echo "Backend no iniciÃ³" && cat backend.log && exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6 out/k6
          cat > tests/k6/invitar_top3_smoke.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 1, duration: '10s' };
          const BASE = __ENV.API_BASE || 'http://localhost:8080';
          export default function () {
            const res = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(res, { "status 200": r => r.status === 200 });
            sleep(1);
          }
          JS

      - name: Run k6 (Docker)
        run: |
          mkdir -p out/k6
          docker run --rm -e API_BASE=${API_BASE} \
            -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 \
            run /scripts/invitar_top3_smoke.js --summary-export=/out/smoke.json || \
            echo '{"metrics":{}}' > out/k6/smoke.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## ðŸ“ˆ k6 Summary" >> $GITHUB_STEP_SUMMARY
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count // 0' "$f")
            echo "- $tag: $reqs requests" >> $GITHUB_STEP_SUMMARY
          done
