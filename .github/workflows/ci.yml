name: CI - Backend JUnit + k6

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  backend-tests:
    name: JUnit (Maven)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Maven test
        run: mvn -B clean test

  k6-load:
    name: k6 (smoke/stress/soak/spike)
    runs-on: ubuntu-latest
    needs: backend-tests
    services:
      postgres:
        image: postgres:15
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: ArreglaYaBackend
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ArreglaYaBackend
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: root
      API_BASE: http://localhost:8080

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Boot backend (background)
        run: |
          nohup mvn -DskipTests spring-boot:run > backend.log 2>&1 &
          echo "⏳ Esperando a que levante el backend..."
          for i in {1..120}; do # hasta 4 minutos
            if curl -sf http://localhost:8080/actuator/health > /dev/null; then 
              echo "✅ Backend UP"
              break
            fi
            sleep 2
          done
          curl -s http://localhost:8080/actuator/health || (echo "❌ Backend no inició" && tail -n 200 backend.log && exit 1)

      - name: Prepare k6 scripts
        run: |
          mkdir -p tests/k6 out/k6
          chmod 777 out/k6

          # SMOKE
          cat > tests/k6/smoke.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 1, duration: '10s' };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
            sleep(1);
          }
          JS

          # STRESS
          cat > tests/k6/stress.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '20s', target: 20 },
              { duration: '20s', target: 50 },
              { duration: '20s', target: 100 },
              { duration: '20s', target: 0 },
            ],
          };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
          }
          JS

          # SOAK
          cat > tests/k6/soak.js <<'JS'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = { vus: 10, duration: '2m' };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
            sleep(1);
          }
          JS

          # SPIKE
          cat > tests/k6/spike.js <<'JS'
          import http from 'k6/http';
          import { check } from 'k6';
          export const options = {
            stages: [
              { duration: '5s', target: 5 },
              { duration: '5s', target: 200 },
              { duration: '10s', target: 5 },
              { duration: '5s', target: 0 },
            ],
          };
          const BASE = __ENV.API_BASE;
          export default function () {
            const r = http.post(`${BASE}/api/solicitudes/invitar-top3`, "{}", { headers: { "Content-Type": "application/json" } });
            check(r, { "status 200": x => x.status === 200 });
          }
          JS

      - name: Run k6 (Docker)
        run: |
          for script in smoke stress soak spike; do
            docker run --rm --network host -e API_BASE=${API_BASE} \
              -v $PWD/tests/k6:/scripts -v $PWD/out/k6:/out grafana/k6 \
              run /scripts/$script.js --summary-export=/out/$script.json || \
              echo '{"metrics":{}}' > out/k6/$script.json
          done

      - name: Subir artefactos k6
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: k6-summaries
          path: out/k6/*.json

      - name: Resumen k6
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y jq >/dev/null
          echo "## 📈 k6 Summary" >> $GITHUB_STEP_SUMMARY
          for f in out/k6/*.json; do
            tag=$(basename "$f" .json)
            reqs=$(jq '.metrics.http_reqs.count // 0' "$f")
            p95=$(jq '.metrics.http_req_duration["p(95)"] // 0' "$f")
            fail=$(jq '.metrics.http_req_failed.rate // 0' "$f")
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### $tag" >> $GITHUB_STEP_SUMMARY
            echo "| Requests | p95 (ms) | Fail rate |" >> $GITHUB_STEP_SUMMARY
            echo "|---------:|---------:|----------:|" >> $GITHUB_STEP_SUMMARY
            printf "| %s | %.2f | %.4f |\n" "$reqs" "$p95" "$fail" >> $GITHUB_STEP_SUMMARY
          done

      - name: Mostrar backend.log siempre
        if: always()
        run: |
          echo "## 📜 Backend log (últimas 200 líneas)" >> $GITHUB_STEP_SUMMARY
          tail -n 200 backend.log >> $GITHUB_STEP_SUMMARY
